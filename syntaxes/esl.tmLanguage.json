{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "ECMA-SL",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#expressions" },
    { "include": "#statements" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.esl",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.esl",
          "match": "\\b(parse_number|parse_string|octal_to_decimal|hex_decode|utf8_decode|float_to_string|float_of_string|obj_to_list|obj_fields|to_int|to_int32|to_uint32|to_uint16|from_char_code|from_char_code_u|to_char_code|to_char_code_u|to_lower_case|to_upper_case|trim|abs|acos|asin|atan|atan2|ceil|cos|exp|floor|log_e|log_10|max|min|random|sin|sqrt|tan|PI|MAX_VALUE|MIN_VALUE|in_obj|in_list|l_len|l_nth|l_add|l_prepend|l_concat|l_remove_last|l_sort|l_reverse|hd|tl|t_len|t_nth|fst|snd|s_split|s_concat|s_len|s_len_u|s_nth|s_nth_u|s_substr|s_substr_u|int_to_float|int_to_string|int_of_string|int_of_float|int_to_four_hex|typeof|catch|throw|fail|import|None|default|if|else|elif|while|foreach|return|function|macro|delete|null|true|false|repeat|until|match|with|print|gen_wrapper|assert|switch|case|sdefault|NaN|Infinity|lambda|extern)\\b"
        }
      ]
    },
    "expressions": {
      "patterns": [{ "include": "#values" }]
    },
    "#statements": {
      "patterns": []
    },
    "values": {
      "patterns": [{ "include": "#strings" }]
    },
    "strings": {
      "name": "string.quoted.double.esl",
      "begin": "\"",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.string.begin.esl" }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": { "name": "punctuation.definition.string.end.esl" },
        "2": { "name": "invalid.illegal.newline.esl" }
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },
    "string-character-escape": {
      "name": "constant.character.escape.esl",
      "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|.|$)"
    }
  },
  "scopeName": "source.esl"
}
